<!DOCTYPE html>
<html>
<head>
    <title>Place Autocomplete and Directions</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <link rel="stylesheet" href="stylesheets/style.css">
</head>
<body>
<div id="header">
    <ul>
        <li><a href="#">Home</a></li>
        <li><a href="#">About</a></li>
        <li><a href="#">Login</a></li>
        <li><a href="#">Signup</a></li>
    </ul>
</div>
<input id="origin-input" class="controls" type="text" placeholder="Origin location">
<input id="destination-input" class="controls" left=300px type="text" placeholder="Destination location">

<div id="leftSidebar" class="leftSidebar">
    <a href="javascript:void(0)" class="closebtn" onclick="closeLeftNav()">&times;</a>
    <form class="checkForm">
        <h2>Personal</h2>
        <br>
        <br>
        <input id="fastestRoute" type="checkbox" onchange='handleChange(this);' value=false><span>Fastest</span>
        <br>
        <br>
        <br>
        <input id="wandering" type="checkbox" onchange='handleChange(this);' value=false><span>Wandering</span>
        <br>
        <br>
        <br>
        <input id="disability" type="checkbox" onchange='handleChange(this);' value=false><span>Disability</span>
    </form>
</div>


<div id="rightSidebar" class="rightSidebar">
    <a href="javascript:void(0)" class="closebtn" onclick="closeRightNav()">&times;</a>
    <div id="mode-selector" class="controls">
        <h1>
            Our Suggestion:
        </h1>
        <br>
        <p id="output_1" style="font-size: 17px"></p>
        <br>
        <p id="output_2" style="font-size: 17px"></p>
        <br>
        <p id="output_3" style="font-size: 17px"></p>
        <br>
        <p id="output_4" style="font-size: 17px"></p>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <h2>You can decide which travaling mode you want to use:</h2>
        <br>
        <br>
        <input type="radio" name="type" id="walking">
        <label id="walking_v" for="walking">Walking </label>
        <br>
        <input type="radio" name="type" id="driving">
        <label id="driving_v" for="driving"> Driving</label>
    </div>
</div>


<div id="leftSide">
    <button id="openLeftNav" class="openbtn" onclick="openLeftNav()">&#9776;</button>
</div>

<div id="container">
    <div id="map" class="column"></div>
    <div id="left" class="column"></div>
    <!-- <div id="right" class="column"></div> -->
</div>

<div id="footer"></div>

<script>
  // This example requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

  var map;

  function openLeftNav() {
    document.getElementById("leftSidebar").style.width = "15%";
    document.getElementById("leftSide").style.marginLeft = "15%";
  }

  function closeLeftNav() {
    document.getElementById("leftSidebar").style.width = "0";
    document.getElementById("leftSide").style.marginLeft = "0";
    document.getElementById("openLeftNav").style.display = "inline-block";
  }

  function handleChange(checkbox) {
    if (checkbox.value == "on") {
      document.getElementById("fastestRoute").value = true;
    } else {
      document.getElementById("fastestRoute").value = true
    }
  }

  function closeRightNav() {
    document.getElementById("rightSidebar").style.width = "0";
    document.getElementById("map").style.width = "100%";
  }


  function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
      mapTypeControl: false,
      center: {lat: -37.8, lng: 144.96},
      zoom: 13
    });

    new AutocompleteDirectionsHandler(map);
  }

  /**
   * @constructor
   */
  function AutocompleteDirectionsHandler(map) {
    this.map = map;
    this.originPlaceId = null;
    this.destinationPlaceId = null;
    this.travelMode = 'WALKING';
    var originInput = document.getElementById('origin-input');
    var destinationInput = document.getElementById('destination-input');
    this.directionsService = new google.maps.DirectionsService;
    this.directionsDisplay = new google.maps.DirectionsRenderer;
    this.directionsDisplay.setMap(map);

    var originAutocomplete = new google.maps.places.Autocomplete(
      originInput, {placeIdOnly: true});
    var destinationAutocomplete = new google.maps.places.Autocomplete(
      destinationInput, {placeIdOnly: true});

    this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
    this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

    this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
    this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);

// for testing
    // document.getElementById("rightSidebar").style.width = "19%";
    // document.getElementById("map").style.width = "80%";

    // document.getElementById("output_1").innerHTML = "The air quality is very good."
    // document.getElementById("output_2").innerHTML = "There is 100% availability of car park around your destination."
    // document.getElementById("output_3").innerHTML = "The weather is very good."
    // document.getElementById("output_4").innerHTML = "We suggest you to walk."

  }


  AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function (autocomplete, mode) {
    var me = this;
    autocomplete.bindTo('bounds', this.map);
    autocomplete.addListener('place_changed', function () {
      var place = autocomplete.getPlace();
      if (!place.place_id) {
        window.alert("Please select an option from the dropdown list.");
        return;
      }
      if (mode === 'ORIG') {
        me.originPlaceId = place.place_id;
      } else {
        me.destinationPlaceId = place.place_id;
      }
      me.route();
    });

  };

  AutocompleteDirectionsHandler.prototype.route = function () {
    if (!this.originPlaceId || !this.destinationPlaceId) {
      return;
    }
    var me = this;
    let features = [];
    let wayPts = [];
    let sensors = [];
    this.directionsService.route({
      origin: {'placeId': this.originPlaceId},
      destination: {'placeId': this.destinationPlaceId},
      travelMode: this.travelMode
    }, function (mapResponse, status) {
      if (status === 'OK') {
        let xhr = new XMLHttpRequest();
        xhr.open("POST", "/path", true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';
        me.setupClickListener('walking', 'WALKING', wayPts, features, sensors);
        me.setupClickListener('driving', 'DRIVING', wayPts, features, sensors);
        xhr.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200) {
            let body = xhr.response;
            let toilet_list = body.toilet;
            let pts = body.way_point;
            let sensorList = body.sensor_list;
            let sug = body.suggestion;
            console.log(body);
            for (let toilet of toilet_list) {
              features.push({
                position: new google.maps.LatLng(toilet.lat, toilet.lng)
              });
            }
            for (let pt of pts) {
              wayPts.push({
                location: {lat: pt.lat, lng: pt.lng},
                stopover: true
              });
            }
            for (let sensor of sensorList) {
              sensors.push({
                center: sensor.center,
                radius: sensor.radius
              });
            }
            let output_one = "The air quality is " + sug.air_quality + ".";
            let output_two = "There is " + Math.round(sug.car_park_vacant_rate * 100) + "% availability of car park around your destination.";
            let output_three = "The weather is " + sug.weather + ".";
            let output_four = "We suggest you to " + sug.mode + ".";
            document.getElementById("output_1").innerHTML = output_one
            document.getElementById("output_2").innerHTML = output_two
            document.getElementById("output_3").innerHTML = output_three
            document.getElementById("output_4").innerHTML = output_four

            document.getElementById("rightSidebar").style.width = "19%";
            document.getElementById("map").style.width = "80%";
          }
        };
        let send_path = (mapResponse.routes[0].overview_path).map(x => x.toJSON());
        let dist_path = (mapResponse.routes[0].legs).reduce((x, y) => x + y.distance);
        console.log(send_path);
        let c1 = document.getElementById("fastestRoute").value;
        let c2 = document.getElementById("wandering").value;
        let c3 = document.getElementById("disability").value;
        xhr.send(JSON.stringify({
          'path': send_path,
          'distance': dist_path,
          'fastestRoute': c1,
          'wandering': c2,
          'diability': c3
        }));
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  };

  AutocompleteDirectionsHandler.prototype.routeTwo = function (waypts, features, sensors) {
    if (!this.originPlaceId || !this.destinationPlaceId) {
      return;
    }
    var me = this;
    this.directionsService.route({
      origin: {'placeId': this.originPlaceId},
      destination: {'placeId': this.destinationPlaceId},
      travelMode: me.travelMode,
      //waypoints: waypts,
      //optimizeWaypoints: true
    }, function (response, status) {
      if (status === 'OK') {
        me.directionsDisplay.setDirections(response);
        features.forEach(function (feature) {
          var marker = new google.maps.Marker({
            position: feature.position,
            icon: {
              url: '/images/toilet.png',
              scaledSize: new google.maps.Size(25, 25),
              origin: new google.maps.Point(0, 0), // origin
              anchor: new google.maps.Point(0, 0)
            },
            map: map,

          });
        });
        for (let i of sensors) {
          var volumeCircle = new google.maps.Circle({
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 0,
            fillColor: '#ff3600',
            fillOpacity: 0.35,
            map: map,
            center: i.center,
            radius: Math.sqrt(i.radius)*10
          });
        }
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  };
  AutocompleteDirectionsHandler.prototype.setupClickListener = function (id, mode, wayPts, features, sensors) {
    var radioButton = document.getElementById(id);
    var me = this;
    radioButton.addEventListener('click', function () {
      me.travelMode = mode;
      me.routeTwo(wayPts, features, sensors);
    });
  };

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAty0toJ0mIxSCgA03HJq2IcgLArpRh1Rk&libraries=places&callback=initMap"
        async defer></script>
</body>
</html>
